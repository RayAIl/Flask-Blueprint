services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ~/.pg/pg_data/flask:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  flask:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ~/.uploads/images/flask:/app/app/static/upload
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - app-network

  nginx:
    image: nginx:latest
    build:
      context: ./nginx/
      dockerfile: ./Dockerfile
    container_name: nginx
    env_file:
      - .env
    depends_on:
      - flask
    ports:
      - "8080:80"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge